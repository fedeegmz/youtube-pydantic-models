{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"youtube-pydantic-models Documentation for version: v0.2 A Python library that contains the most popular YouTube models based on Pydantic. If you are working with the YouTube API , youtube-pydantic-models can help you validate, manipulate, and retrieve data. Use the YoutubeClient class to get data about channels, playlists, videos and more. The YouTube API returns data using camel case, but you can choose to return data using camel case or snake case. With the parameter by_alias=True , data is returned using camel case. When using the model, every parameter is accessed using snake case. Author: fedeegmz Source: GitHub Features Validate YouTube API responses using Pydantic models Convert data between camel case and snake case Easy-to-use interface for common YouTube resources Make requests to YouTube API using the client Requirements Python 3.7+ A YouTube Data API Key Installation You can install the library using pip: pip install youtube-pydantic-models Example usage YoutubeClient from youtube_pydantic_models import YoutubeClient client = YoutubeClient(\"MY_API_KEY\") channel = client.get_channel( id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\", part=\"snippet, statistics\" ) if channel: print(channel.id) # -> UC_x5XG1OV2P6uZZ5FSM9Ttw Channel Model import requests from youtube_pydantic_models import YoutubeChannelResource params = { 'id': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"snippet, contentDetails\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/channels\", params=params ).json() channel = YoutubeChannelResource(**response) print(channel.id) print(channel.snippet.custom_url) channel_dict = channel.model_dump( by_alias=True, exclude_none=True ) Playlist Model import requests from youtube_pydantic_models import YoutubePlaylistResource params = { 'channelId': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"snippet, player\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/playlists\", params=params ).json() playlist = YoutubePlaylistResource(**response) print(playlist.snippet.channel_title) print(playlist.player.embed_html) playlist_dict = playlist.model_dump( by_alias=True, exclude_none=True ) Video Model import requests from youtube_pydantic_models import YoutubeVideoResource params = { 'id': \"PJm8WNajZtw\", 'key': \"YOUR_API_KEY\", 'part': \"statistics\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/videos\", params=params ).json() video = YoutubeVideoResource(**response) print(video.id) print(video.statistics.view_count) video_dict = video.model_dump( by_alias=True, exclude_none=True ) Search Model import requests from youtube_pydantic_models import YoutubeSearchResource params = { 'channelId': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"id, snippet\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/search\", params=params ).json() resource = YoutubeSearchResource(**response) print(resource.id.kind) print(resource.snippet.thumbnails.default.url) resource_dict = resource.model_dump( by_alias=True, exclude_none=True ) Contributing Contributions are welcome! Please open an issue or submit a pull request on GitHub. License This project is licensed under the MIT License.","title":"Home"},{"location":"#youtube-pydantic-models","text":"Documentation for version: v0.2 A Python library that contains the most popular YouTube models based on Pydantic. If you are working with the YouTube API , youtube-pydantic-models can help you validate, manipulate, and retrieve data. Use the YoutubeClient class to get data about channels, playlists, videos and more. The YouTube API returns data using camel case, but you can choose to return data using camel case or snake case. With the parameter by_alias=True , data is returned using camel case. When using the model, every parameter is accessed using snake case. Author: fedeegmz Source: GitHub","title":"youtube-pydantic-models"},{"location":"#features","text":"Validate YouTube API responses using Pydantic models Convert data between camel case and snake case Easy-to-use interface for common YouTube resources Make requests to YouTube API using the client","title":"Features"},{"location":"#requirements","text":"Python 3.7+ A YouTube Data API Key","title":"Requirements"},{"location":"#installation","text":"You can install the library using pip: pip install youtube-pydantic-models","title":"Installation"},{"location":"#example-usage","text":"","title":"Example usage"},{"location":"#youtubeclient","text":"from youtube_pydantic_models import YoutubeClient client = YoutubeClient(\"MY_API_KEY\") channel = client.get_channel( id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\", part=\"snippet, statistics\" ) if channel: print(channel.id) # -> UC_x5XG1OV2P6uZZ5FSM9Ttw","title":"YoutubeClient"},{"location":"#channel-model","text":"import requests from youtube_pydantic_models import YoutubeChannelResource params = { 'id': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"snippet, contentDetails\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/channels\", params=params ).json() channel = YoutubeChannelResource(**response) print(channel.id) print(channel.snippet.custom_url) channel_dict = channel.model_dump( by_alias=True, exclude_none=True )","title":"Channel Model"},{"location":"#playlist-model","text":"import requests from youtube_pydantic_models import YoutubePlaylistResource params = { 'channelId': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"snippet, player\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/playlists\", params=params ).json() playlist = YoutubePlaylistResource(**response) print(playlist.snippet.channel_title) print(playlist.player.embed_html) playlist_dict = playlist.model_dump( by_alias=True, exclude_none=True )","title":"Playlist Model"},{"location":"#video-model","text":"import requests from youtube_pydantic_models import YoutubeVideoResource params = { 'id': \"PJm8WNajZtw\", 'key': \"YOUR_API_KEY\", 'part': \"statistics\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/videos\", params=params ).json() video = YoutubeVideoResource(**response) print(video.id) print(video.statistics.view_count) video_dict = video.model_dump( by_alias=True, exclude_none=True )","title":"Video Model"},{"location":"#search-model","text":"import requests from youtube_pydantic_models import YoutubeSearchResource params = { 'channelId': \"UC_x5XG1OV2P6uZZ5FSM9Ttw\", 'key': \"YOUR_API_KEY\", 'part': \"id, snippet\" } response = requests.get( \"https://www.googleapis.com/youtube/v3/search\", params=params ).json() resource = YoutubeSearchResource(**response) print(resource.id.kind) print(resource.snippet.thumbnails.default.url) resource_dict = resource.model_dump( by_alias=True, exclude_none=True )","title":"Search Model"},{"location":"#contributing","text":"Contributions are welcome! Please open an issue or submit a pull request on GitHub.","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License.","title":"License"},{"location":"youtube_client/","text":"YouTube Client YouTube's client based on requests. from youtube_pydantic_models import YoutubeClient client = YoutubeClient(\"YOUR_API_KEY\") channel = client.get_channel(\"example_id\", \"snippet, statistics\") print(channel.snippet.title) print(client.get_current_quota()) Init args api_key (str): secret YouTube API key. qouta_per_day (int): limit per day of YouTube quota. By default is 10000. quotas_table (Enum): table of quota's cost. By default is Quotas class Methods get_api_service_name(): returns the value of _api_service_name private attribute. get_api_version(): returns the value of _api_version private attribute. get_quota_per_day(): returns the value of _quota_per_day private attribute. set_quota_per_day(): set a value of _quota_per_day private attribute. get_current_quota(): returns the value of _current_quota private attribute. get_channel(id: str, part: str) : returns a YoutubeChannelResource or None. get_playlist(id: str, part: str) : returns a YoutubePlaylistResource or None. get_video(id: str, part: str) : returns a YoutubeVideoResource or None. search(id: str, part: str, type: str) : returns a YoutubeSearchResource or None. get_channel() Search a YouTube channel by id. Select part of the resource. Returns a YoutubeChannelResource or None. Parameters (required): id (str): channel id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, statistics, topicDetails, status, brandingSettings, contentOwnerDetails). Errors: QuotaException : unavailable YouTube quota. get_playlist() Search a YouTube playlist by id. Select part of the resource. Returns a YoutubePlaylistResource or None. Parameters (required): id (str): playlist id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, player, status, localizations). Errors: QuotaException : unavailable YouTube quota. get_video() Search a YouTube video by id. Select part of the resource. Returns a YoutubeVideoResource or None. Parameters (required): id (str): video id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, statistics, topicDetails, status, player, recordingDetails, localizations, liveStreamingDetails). Errors: QuotaException : unavailable YouTube quota. search() Search a YouTube resource by channel id. Select part of the resource. Returns a YoutubeSearchResource or None. Parameters (required): channel_id (str): channel id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet). type (str): resource's type to filter. Available types: (channel, playlist, video). Errors: QuotaException : unavailable YouTube quota.","title":"Youtube Client"},{"location":"youtube_client/#youtube-client","text":"YouTube's client based on requests. from youtube_pydantic_models import YoutubeClient client = YoutubeClient(\"YOUR_API_KEY\") channel = client.get_channel(\"example_id\", \"snippet, statistics\") print(channel.snippet.title) print(client.get_current_quota())","title":"YouTube Client"},{"location":"youtube_client/#init-args","text":"api_key (str): secret YouTube API key. qouta_per_day (int): limit per day of YouTube quota. By default is 10000. quotas_table (Enum): table of quota's cost. By default is Quotas class","title":"Init args"},{"location":"youtube_client/#methods","text":"get_api_service_name(): returns the value of _api_service_name private attribute. get_api_version(): returns the value of _api_version private attribute. get_quota_per_day(): returns the value of _quota_per_day private attribute. set_quota_per_day(): set a value of _quota_per_day private attribute. get_current_quota(): returns the value of _current_quota private attribute. get_channel(id: str, part: str) : returns a YoutubeChannelResource or None. get_playlist(id: str, part: str) : returns a YoutubePlaylistResource or None. get_video(id: str, part: str) : returns a YoutubeVideoResource or None. search(id: str, part: str, type: str) : returns a YoutubeSearchResource or None.","title":"Methods"},{"location":"youtube_client/#get_channel","text":"Search a YouTube channel by id. Select part of the resource. Returns a YoutubeChannelResource or None. Parameters (required): id (str): channel id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, statistics, topicDetails, status, brandingSettings, contentOwnerDetails). Errors: QuotaException : unavailable YouTube quota.","title":"get_channel()"},{"location":"youtube_client/#get_playlist","text":"Search a YouTube playlist by id. Select part of the resource. Returns a YoutubePlaylistResource or None. Parameters (required): id (str): playlist id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, player, status, localizations). Errors: QuotaException : unavailable YouTube quota.","title":"get_playlist()"},{"location":"youtube_client/#get_video","text":"Search a YouTube video by id. Select part of the resource. Returns a YoutubeVideoResource or None. Parameters (required): id (str): video id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet, contentDetails, statistics, topicDetails, status, player, recordingDetails, localizations, liveStreamingDetails). Errors: QuotaException : unavailable YouTube quota.","title":"get_video()"},{"location":"youtube_client/#search","text":"Search a YouTube resource by channel id. Select part of the resource. Returns a YoutubeSearchResource or None. Parameters (required): channel_id (str): channel id to search. part (str): resource's parts separated by comma (,). Available parts: (snippet). type (str): resource's type to filter. Available types: (channel, playlist, video). Errors: QuotaException : unavailable YouTube quota.","title":"search()"},{"location":"models/channel/","text":"Youtube Channel Resource from youtube_pydantic_models import YoutubeChannelResource Represents a -> YouTube channel . { \"kind\": \"youtube#channel\", \"etag\": etag, \"id\": string, \"snippet\": { \"title\": string, \"description\": string, \"customUrl\": string, \"publishedAt\": datetime, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string }, \"country\": string }, \"contentDetails\": { \"relatedPlaylists\": { \"likes\": string, \"favorites\": string, \"uploads\": string } }, \"statistics\": { \"viewCount\": unsigned long, \"subscriberCount\": unsigned long, // this value is rounded to three significant figures \"hiddenSubscriberCount\": boolean, \"videoCount\": unsigned long }, \"topicDetails\": { \"topicIds\": [ string ], \"topicCategories\": [ string ] }, \"status\": { \"privacyStatus\": string, \"isLinked\": boolean, \"longUploadsStatus\": string, \"madeForKids\": boolean, \"selfDeclaredMadeForKids\": boolean }, \"brandingSettings\": { \"channel\": { \"title\": string, \"description\": string, \"keywords\": string, \"trackingAnalyticsAccountId\": string, \"unsubscribedTrailer\": string, \"defaultLanguage\": string, \"country\": string }, \"watch\": { \"textColor\": string, \"backgroundColor\": string, \"featuredPlaylistId\": string } }, \"auditDetails\": { \"overallGoodStanding\": boolean, \"communityGuidelinesGoodStanding\": boolean, \"copyrightStrikesGoodStanding\": boolean, \"contentIdClaimsGoodStanding\": boolean }, \"contentOwnerDetails\": { \"contentOwner\": string, \"timeLinked\": datetime }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Channel"},{"location":"models/channel/#youtube-channel-resource","text":"from youtube_pydantic_models import YoutubeChannelResource Represents a -> YouTube channel . { \"kind\": \"youtube#channel\", \"etag\": etag, \"id\": string, \"snippet\": { \"title\": string, \"description\": string, \"customUrl\": string, \"publishedAt\": datetime, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string }, \"country\": string }, \"contentDetails\": { \"relatedPlaylists\": { \"likes\": string, \"favorites\": string, \"uploads\": string } }, \"statistics\": { \"viewCount\": unsigned long, \"subscriberCount\": unsigned long, // this value is rounded to three significant figures \"hiddenSubscriberCount\": boolean, \"videoCount\": unsigned long }, \"topicDetails\": { \"topicIds\": [ string ], \"topicCategories\": [ string ] }, \"status\": { \"privacyStatus\": string, \"isLinked\": boolean, \"longUploadsStatus\": string, \"madeForKids\": boolean, \"selfDeclaredMadeForKids\": boolean }, \"brandingSettings\": { \"channel\": { \"title\": string, \"description\": string, \"keywords\": string, \"trackingAnalyticsAccountId\": string, \"unsubscribedTrailer\": string, \"defaultLanguage\": string, \"country\": string }, \"watch\": { \"textColor\": string, \"backgroundColor\": string, \"featuredPlaylistId\": string } }, \"auditDetails\": { \"overallGoodStanding\": boolean, \"communityGuidelinesGoodStanding\": boolean, \"copyrightStrikesGoodStanding\": boolean, \"contentIdClaimsGoodStanding\": boolean }, \"contentOwnerDetails\": { \"contentOwner\": string, \"timeLinked\": datetime }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Youtube Channel Resource"},{"location":"models/playlist/","text":"Youtube Playlist Resource from youtube_pydantic_models import YoutubePlaylistResource Represents a -> YouTube playlist . { \"kind\": \"youtube#playlist\", \"etag\": etag, \"id\": string, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string } }, \"status\": { \"privacyStatus\": string }, \"contentDetails\": { \"itemCount\": unsigned integer }, \"player\": { \"embedHtml\": string }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Playlist"},{"location":"models/playlist/#youtube-playlist-resource","text":"from youtube_pydantic_models import YoutubePlaylistResource Represents a -> YouTube playlist . { \"kind\": \"youtube#playlist\", \"etag\": etag, \"id\": string, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string } }, \"status\": { \"privacyStatus\": string }, \"contentDetails\": { \"itemCount\": unsigned integer }, \"player\": { \"embedHtml\": string }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Youtube Playlist Resource"},{"location":"models/search/","text":"Youtube Search Resource from youtube_pydantic_models import YoutubeSearchResource Represents a -> YouTube search resource . { \"kind\": \"youtube#searchResult\", \"etag\": etag, \"id\": { \"kind\": string, \"videoId\": string, \"channelId\": string, \"playlistId\": string }, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"liveBroadcastContent\": string } }","title":"Search"},{"location":"models/search/#youtube-search-resource","text":"from youtube_pydantic_models import YoutubeSearchResource Represents a -> YouTube search resource . { \"kind\": \"youtube#searchResult\", \"etag\": etag, \"id\": { \"kind\": string, \"videoId\": string, \"channelId\": string, \"playlistId\": string }, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"liveBroadcastContent\": string } }","title":"Youtube Search Resource"},{"location":"models/video/","text":"Youtube Video Resource from youtube_pydantic_models import YoutubeVideoResource Represents a -> YouTube video . { \"kind\": \"youtube#video\", \"etag\": etag, \"id\": string, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"tags\": [ string ], \"categoryId\": string, \"liveBroadcastContent\": string, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string }, \"defaultAudioLanguage\": string }, \"contentDetails\": { \"duration\": string, \"dimension\": string, \"definition\": string, \"caption\": string, \"licensedContent\": boolean, \"regionRestriction\": { \"allowed\": [ string ], \"blocked\": [ string ] }, \"contentRating\": { \"acbRating\": string, \"agcomRating\": string, \"anatelRating\": string, \"bbfcRating\": string, \"bfvcRating\": string, \"bmukkRating\": string, \"catvRating\": string, \"catvfrRating\": string, \"cbfcRating\": string, \"cccRating\": string, \"cceRating\": string, \"chfilmRating\": string, \"chvrsRating\": string, \"cicfRating\": string, \"cnaRating\": string, \"cncRating\": string, \"csaRating\": string, \"cscfRating\": string, \"czfilmRating\": string, \"djctqRating\": string, \"djctqRatingReasons\": [, string ], \"ecbmctRating\": string, \"eefilmRating\": string, \"egfilmRating\": string, \"eirinRating\": string, \"fcbmRating\": string, \"fcoRating\": string, \"fmocRating\": string, \"fpbRating\": string, \"fpbRatingReasons\": [, string ], \"fskRating\": string, \"grfilmRating\": string, \"icaaRating\": string, \"ifcoRating\": string, \"ilfilmRating\": string, \"incaaRating\": string, \"kfcbRating\": string, \"kijkwijzerRating\": string, \"kmrbRating\": string, \"lsfRating\": string, \"mccaaRating\": string, \"mccypRating\": string, \"mcstRating\": string, \"mdaRating\": string, \"medietilsynetRating\": string, \"mekuRating\": string, \"mibacRating\": string, \"mocRating\": string, \"moctwRating\": string, \"mpaaRating\": string, \"mpaatRating\": string, \"mtrcbRating\": string, \"nbcRating\": string, \"nbcplRating\": string, \"nfrcRating\": string, \"nfvcbRating\": string, \"nkclvRating\": string, \"oflcRating\": string, \"pefilmRating\": string, \"rcnofRating\": string, \"resorteviolenciaRating\": string, \"rtcRating\": string, \"rteRating\": string, \"russiaRating\": string, \"skfilmRating\": string, \"smaisRating\": string, \"smsaRating\": string, \"tvpgRating\": string, \"ytRating\": string }, \"projection\": string, \"hasCustomThumbnail\": boolean }, \"status\": { \"uploadStatus\": string, \"failureReason\": string, \"rejectionReason\": string, \"privacyStatus\": string, \"publishAt\": datetime, \"license\": string, \"embeddable\": boolean, \"publicStatsViewable\": boolean, \"madeForKids\": boolean, \"selfDeclaredMadeForKids\": boolean }, \"statistics\": { \"viewCount\": string, \"likeCount\": string, \"dislikeCount\": string, \"favoriteCount\": string, \"commentCount\": string }, \"player\": { \"embedHtml\": string, \"embedHeight\": long, \"embedWidth\": long }, \"topicDetails\": { \"topicIds\": [ string ], \"relevantTopicIds\": [ string ], \"topicCategories\": [ string ] }, \"recordingDetails\": { \"recordingDate\": datetime }, \"fileDetails\": { \"fileName\": string, \"fileSize\": unsigned long, \"fileType\": string, \"container\": string, \"videoStreams\": [ { \"widthPixels\": unsigned integer, \"heightPixels\": unsigned integer, \"frameRateFps\": double, \"aspectRatio\": double, \"codec\": string, \"bitrateBps\": unsigned long, \"rotation\": string, \"vendor\": string } ], \"audioStreams\": [ { \"channelCount\": unsigned integer, \"codec\": string, \"bitrateBps\": unsigned long, \"vendor\": string } ], \"durationMs\": unsigned long, \"bitrateBps\": unsigned long, \"creationTime\": string }, \"processingDetails\": { \"processingStatus\": string, \"processingProgress\": { \"partsTotal\": unsigned long, \"partsProcessed\": unsigned long, \"timeLeftMs\": unsigned long }, \"processingFailureReason\": string, \"fileDetailsAvailability\": string, \"processingIssuesAvailability\": string, \"tagSuggestionsAvailability\": string, \"editorSuggestionsAvailability\": string, \"thumbnailsAvailability\": string }, \"suggestions\": { \"processingErrors\": [ string ], \"processingWarnings\": [ string ], \"processingHints\": [ string ], \"tagSuggestions\": [ { \"tag\": string, \"categoryRestricts\": [ string ] } ], \"editorSuggestions\": [ string ] }, \"liveStreamingDetails\": { \"actualStartTime\": datetime, \"actualEndTime\": datetime, \"scheduledStartTime\": datetime, \"scheduledEndTime\": datetime, \"concurrentViewers\": unsigned long, \"activeLiveChatId\": string }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Video"},{"location":"models/video/#youtube-video-resource","text":"from youtube_pydantic_models import YoutubeVideoResource Represents a -> YouTube video . { \"kind\": \"youtube#video\", \"etag\": etag, \"id\": string, \"snippet\": { \"publishedAt\": datetime, \"channelId\": string, \"title\": string, \"description\": string, \"thumbnails\": { (key): { \"url\": string, \"width\": unsigned integer, \"height\": unsigned integer } }, \"channelTitle\": string, \"tags\": [ string ], \"categoryId\": string, \"liveBroadcastContent\": string, \"defaultLanguage\": string, \"localized\": { \"title\": string, \"description\": string }, \"defaultAudioLanguage\": string }, \"contentDetails\": { \"duration\": string, \"dimension\": string, \"definition\": string, \"caption\": string, \"licensedContent\": boolean, \"regionRestriction\": { \"allowed\": [ string ], \"blocked\": [ string ] }, \"contentRating\": { \"acbRating\": string, \"agcomRating\": string, \"anatelRating\": string, \"bbfcRating\": string, \"bfvcRating\": string, \"bmukkRating\": string, \"catvRating\": string, \"catvfrRating\": string, \"cbfcRating\": string, \"cccRating\": string, \"cceRating\": string, \"chfilmRating\": string, \"chvrsRating\": string, \"cicfRating\": string, \"cnaRating\": string, \"cncRating\": string, \"csaRating\": string, \"cscfRating\": string, \"czfilmRating\": string, \"djctqRating\": string, \"djctqRatingReasons\": [, string ], \"ecbmctRating\": string, \"eefilmRating\": string, \"egfilmRating\": string, \"eirinRating\": string, \"fcbmRating\": string, \"fcoRating\": string, \"fmocRating\": string, \"fpbRating\": string, \"fpbRatingReasons\": [, string ], \"fskRating\": string, \"grfilmRating\": string, \"icaaRating\": string, \"ifcoRating\": string, \"ilfilmRating\": string, \"incaaRating\": string, \"kfcbRating\": string, \"kijkwijzerRating\": string, \"kmrbRating\": string, \"lsfRating\": string, \"mccaaRating\": string, \"mccypRating\": string, \"mcstRating\": string, \"mdaRating\": string, \"medietilsynetRating\": string, \"mekuRating\": string, \"mibacRating\": string, \"mocRating\": string, \"moctwRating\": string, \"mpaaRating\": string, \"mpaatRating\": string, \"mtrcbRating\": string, \"nbcRating\": string, \"nbcplRating\": string, \"nfrcRating\": string, \"nfvcbRating\": string, \"nkclvRating\": string, \"oflcRating\": string, \"pefilmRating\": string, \"rcnofRating\": string, \"resorteviolenciaRating\": string, \"rtcRating\": string, \"rteRating\": string, \"russiaRating\": string, \"skfilmRating\": string, \"smaisRating\": string, \"smsaRating\": string, \"tvpgRating\": string, \"ytRating\": string }, \"projection\": string, \"hasCustomThumbnail\": boolean }, \"status\": { \"uploadStatus\": string, \"failureReason\": string, \"rejectionReason\": string, \"privacyStatus\": string, \"publishAt\": datetime, \"license\": string, \"embeddable\": boolean, \"publicStatsViewable\": boolean, \"madeForKids\": boolean, \"selfDeclaredMadeForKids\": boolean }, \"statistics\": { \"viewCount\": string, \"likeCount\": string, \"dislikeCount\": string, \"favoriteCount\": string, \"commentCount\": string }, \"player\": { \"embedHtml\": string, \"embedHeight\": long, \"embedWidth\": long }, \"topicDetails\": { \"topicIds\": [ string ], \"relevantTopicIds\": [ string ], \"topicCategories\": [ string ] }, \"recordingDetails\": { \"recordingDate\": datetime }, \"fileDetails\": { \"fileName\": string, \"fileSize\": unsigned long, \"fileType\": string, \"container\": string, \"videoStreams\": [ { \"widthPixels\": unsigned integer, \"heightPixels\": unsigned integer, \"frameRateFps\": double, \"aspectRatio\": double, \"codec\": string, \"bitrateBps\": unsigned long, \"rotation\": string, \"vendor\": string } ], \"audioStreams\": [ { \"channelCount\": unsigned integer, \"codec\": string, \"bitrateBps\": unsigned long, \"vendor\": string } ], \"durationMs\": unsigned long, \"bitrateBps\": unsigned long, \"creationTime\": string }, \"processingDetails\": { \"processingStatus\": string, \"processingProgress\": { \"partsTotal\": unsigned long, \"partsProcessed\": unsigned long, \"timeLeftMs\": unsigned long }, \"processingFailureReason\": string, \"fileDetailsAvailability\": string, \"processingIssuesAvailability\": string, \"tagSuggestionsAvailability\": string, \"editorSuggestionsAvailability\": string, \"thumbnailsAvailability\": string }, \"suggestions\": { \"processingErrors\": [ string ], \"processingWarnings\": [ string ], \"processingHints\": [ string ], \"tagSuggestions\": [ { \"tag\": string, \"categoryRestricts\": [ string ] } ], \"editorSuggestions\": [ string ] }, \"liveStreamingDetails\": { \"actualStartTime\": datetime, \"actualEndTime\": datetime, \"scheduledStartTime\": datetime, \"scheduledEndTime\": datetime, \"concurrentViewers\": unsigned long, \"activeLiveChatId\": string }, \"localizations\": { (key): { \"title\": string, \"description\": string } } }","title":"Youtube Video Resource"}]}